name: CodeQL Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Runs every day at 3:00 AM IST (Kolkata)
    - cron: '30 21 * * *'

permissions:
  contents: read

jobs:
  # Bash-specific analysis with ShellCheck
  bash-analysis:
    name: Bash Script Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      
      - name: Run ShellCheck on EtherFang.sh
        run: |
          echo "Analyzing EtherFang.sh with ShellCheck..."
          shellcheck -x -f json EtherFang.sh > shellcheck-results.json || true
          cat shellcheck-results.json
      
      - name: Run ShellCheck on all bash scripts
        run: |
          echo "Scanning all bash scripts..."
          find . -name "*.sh" -type f -exec shellcheck -x {} \;
      
      - name: Run advanced bash security checks
        run: |
          echo "Running advanced bash security checks on EtherFang.sh..."
          
          # Check for dangerous functions
          echo "Checking for dangerous functions..."
          grep -n "eval\|exec\|source" EtherFang.sh || echo "‚úì No dangerous functions detected"
          
          # Check for unquoted variables
          echo "Checking for unquoted variables..."
          grep -n '\$[a-zA-Z_][a-zA-Z0-9_]*[^"]' EtherFang.sh || echo "‚úì Variables properly handled"
          
          # Check for proper error handling
          echo "Checking for error handling..."
          grep -n "set -e\|set -o pipefail\||| exit" EtherFang.sh || echo "‚ö†Ô∏è  Consider adding error handling"
          
          # Check for hardcoded credentials
          echo "Checking for hardcoded credentials..."
          grep -n "password\|passwd\|pwd\|key\|token\|secret" EtherFang.sh | grep -E "=\s*['\"]" || echo "‚úì No hardcoded credentials detected"
      
      - name: Generate SARIF from ShellCheck
        if: always()
        run: |
          python3 << 'EOF'
          import json
          
          try:
              with open('shellcheck-results.json', 'r') as f:
                  shellcheck_data = json.load(f)
          except:
              shellcheck_data = []
          
          # Convert ShellCheck JSON to SARIF format
          sarif = {
              "version": "2.1.0",
              "runs": [
                  {
                      "tool": {
                          "driver": {
                              "name": "ShellCheck",
                              "version": "0.9.0",
                              "informationUri": "https://www.shellcheck.net/",
                              "rules": [
                                  {
                                      "id": "SC1000",
                                      "shortDescription": {"text": "ShellCheck analysis"},
                                      "help": {"text": "See https://www.shellcheck.net/wiki/"}
                                  }
                              ]
                          }
                      },
                      "results": [
                          {
                              "ruleId": f"SC{item.get('code', '0000')}",
                              "message": {"text": item.get('message', 'Unknown issue')},
                              "locations": [
                                  {
                                      "physicalLocation": {
                                          "artifactLocation": {"uri": item.get('file', 'EtherFang.sh')},
                                          "region": {
                                              "startLine": item.get('line', 1),
                                              "startColumn": item.get('column', 1)
                                          }
                                      }
                                  }
                              ],
                              "level": "warning" if item.get('level') == 'warning' else "error"
                          }
                          for item in shellcheck_data
                      ]
                  }
              ]
          }
          
          with open('shellcheck-results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          
          print("‚úì SARIF file generated successfully")
          EOF
      
      - name: Upload ShellCheck SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: shellcheck-results.sarif
          category: "bash-analysis"
  
  # Python-specific security analysis
  python-analysis:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit pylint safety
      
      - name: Find and analyze Python files
        run: |
          echo "Searching for Python files..."
          find . -name "*.py" -type f | head -20
      
      - name: Run Bandit security scan
        run: |
          if find . -name "*.py" -type f | grep -q .; then
            echo "Running Bandit security scan..."
            bandit -r . -f json -o bandit-results.json || true
            bandit -r . -v
            echo "‚úì Bandit scan completed"
          else
            echo "No Python files found"
          fi
      
      - name: Run pylint analysis
        run: |
          if find . -name "*.py" -type f | grep -q .; then
            echo "Running Pylint analysis..."
            pylint . --exit-zero --output-format=json > pylint-results.json || true
            echo "‚úì Pylint analysis completed"
          else
            echo "No Python files found"
          fi
      
      - name: Check requirements.txt for vulnerabilities
        run: |
          if [ -f "requirements.txt" ]; then
            echo "Checking requirements.txt for known vulnerabilities..."
            safety check -r requirements.txt --json > safety-results.json || true
            safety check -r requirements.txt || true
            echo "‚úì Requirements scan completed"
          else
            echo "No requirements.txt found"
          fi
      
      - name: Generate Bandit SARIF
        if: always()
        run: |
          if [ -f "bandit-results.json" ]; then
            python3 << 'EOF'
            import json
            
            try:
                with open('bandit-results.json', 'r') as f:
                    bandit_data = json.load(f)
            except:
                bandit_data = {"results": []}
            
            sarif = {
                "version": "2.1.0",
                "runs": [
                    {
                        "tool": {
                            "driver": {
                                "name": "Bandit",
                                "version": "1.7.0",
                                "informationUri": "https://bandit.readthedocs.io/",
                                "rules": []
                            }
                        },
                        "results": [
                            {
                                "ruleId": result.get('test_id', 'UNKNOWN'),
                                "message": {"text": result.get('issue_text', 'Unknown issue')},
                                "locations": [
                                    {
                                        "physicalLocation": {
                                            "artifactLocation": {"uri": result.get('filename', 'unknown')},
                                            "region": {
                                                "startLine": result.get('line_number', 1)
                                            }
                                        }
                                    }
                                ],
                                "level": "error" if result.get('severity') == 'HIGH' else "warning"
                            }
                            for result in bandit_data.get('results', [])
                        ]
                    }
                ]
            }
            
            with open('bandit-results.sarif', 'w') as f:
                json.dump(sarif, f, indent=2)
            
            print("‚úì Bandit SARIF file generated")
            EOF
          fi
      
      - name: Upload Bandit SARIF to GitHub Security
        if: always() && hashFiles('bandit-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.sarif
          category: "python-analysis"
  
  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [bash-analysis, python-analysis]
    if: always()
    
    steps:
      - name: Generate security report
        run: |
          echo "## üîí Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Analysis Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Bash Script Analysis (ShellCheck)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Python Security Analysis (Bandit, Pylint)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dependency Vulnerability Scan (Safety)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results Location" >> $GITHUB_STEP_SUMMARY
          echo "Review detailed findings in GitHub Security tab ‚Üí Code scanning alerts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review critical and high severity findings" >> $GITHUB_STEP_SUMMARY
          echo "2. Address security issues in code" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies as needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Workflow Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Schedule:** Daily at 3:00 AM IST (Kolkata)" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggers:** Push to main/develop, Pull Requests" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis:** Bash + Python only" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
