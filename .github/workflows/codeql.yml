name: CodeQL Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Runs every day at 3:00 AM IST (Kolkata)
    - cron: '30 21 * * *'

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python', 'javascript', 'ruby' ]
        include:
          - language: cpp
            build-mode: autobuild
          - language: python
            build-mode: none
          - language: javascript
            build-mode: autobuild
          - language: ruby
            build-mode: none
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          queries: security-and-quality
          config: |
            paths:
              - src
              - lib
            paths-ignore:
              - tests
              - docs
              - examples
            disable-default-queries: false
            queries:
              - uses: security-and-quality
      
      - name: Autobuild
        if: matrix.build-mode == 'autobuild'
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"
          upload: true
  
  # Additional Bash-specific analysis
  bash-analysis:
    name: Bash Script Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      
      - name: Run ShellCheck with SARIF output
        run: |
          # Install shfmt for code formatting checks
          sudo apt-get install -y shfmt
          
          # Run ShellCheck on all bash scripts and generate SARIF
          shellcheck -f json EtherFang.sh > shellcheck-results.json || true
          
          # Display results
          cat shellcheck-results.json
      
      - name: Run additional security checks
        run: |
          echo "Running advanced bash security checks on EtherFang.sh..."
          
          # Check for dangerous functions
          echo "Checking for dangerous functions..."
          grep -n "eval\|exec\|source\|.\s*file\|wget\|curl" EtherFang.sh || echo "‚úì No dangerous functions detected"
          
          # Check for unquoted variables
          echo "Checking for unquoted variables..."
          grep -n '\$[a-zA-Z_][a-zA-Z0-9_]*[^"]' EtherFang.sh || echo "‚úì Variables properly handled"
          
          # Check for proper error handling
          echo "Checking for error handling..."
          grep -n "set -e\|set -o pipefail\||| exit" EtherFang.sh || echo "‚ö†Ô∏è  Consider adding error handling"
          
          # Check for shellcheck directives
          echo "Checking for ShellCheck directives..."
          grep -c "# shellcheck" EtherFang.sh || echo "‚ÑπÔ∏è  No ShellCheck directives found"
      
      - name: Generate CodeQL-compatible SARIF from ShellCheck
        if: always()
        run: |
          python3 << 'EOF'
          import json
          
          try:
              with open('shellcheck-results.json', 'r') as f:
                  shellcheck_data = json.load(f)
          except:
              shellcheck_data = []
          
          # Convert ShellCheck JSON to SARIF format
          sarif = {
              "version": "2.1.0",
              "runs": [
                  {
                      "tool": {
                          "driver": {
                              "name": "ShellCheck",
                              "version": "0.9.0",
                              "informationUri": "https://www.shellcheck.net/",
                              "rules": [
                                  {
                                      "id": "SC1000",
                                      "shortDescription": {"text": "ShellCheck analysis"},
                                      "help": {"text": "See https://www.shellcheck.net/wiki/SC1000"}
                                  }
                              ]
                          }
                      },
                      "results": [
                          {
                              "ruleId": f"SC{item.get('code', '0000')}",
                              "message": {"text": item.get('message', 'Unknown issue')},
                              "locations": [
                                  {
                                      "physicalLocation": {
                                          "artifactLocation": {"uri": item.get('file', 'EtherFang.sh')},
                                          "region": {
                                              "startLine": item.get('line', 1),
                                              "startColumn": item.get('column', 1)
                                          }
                                      }
                                  }
                              ],
                              "level": "warning" if item.get('level') == 'warning' else "error"
                          }
                          for item in shellcheck_data
                      ]
                  }
              ]
          }
          
          with open('shellcheck-results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          
          print("‚úì SARIF file generated successfully")
          EOF
      
      - name: Upload ShellCheck SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: shellcheck-results.sarif
          category: "bash-analysis"
  
  # Python-specific security analysis
  python-analysis:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install security tools
        run: |
          pip install --upgrade pip
          pip install bandit pylint safety
      
      - name: Run Bandit security scan
        run: |
          if find . -name "*.py" -type f | grep -q .; then
            bandit -r . -f json -o bandit-results.json || true
            echo "‚úì Bandit scan completed"
          else
            echo "No Python files found"
          fi
      
      - name: Run pylint
        run: |
          if find . -name "*.py" -type f | grep -q .; then
            pylint . --exit-zero --output-format=json > pylint-results.json || true
            echo "‚úì Pylint scan completed"
          else
            echo "No Python files found"
          fi
      
      - name: Check requirements.txt for vulnerabilities
        run: |
          if [ -f "requirements.txt" ]; then
            pip install safety
            safety check -r requirements.txt --json > safety-results.json || true
            echo "‚úì Requirements scan completed"
          else
            echo "No requirements.txt found"
          fi
  
  # Report summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [analyze, bash-analysis, python-analysis]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "## üîí Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Analysis Completed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ CodeQL Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Bash Script Analysis (ShellCheck)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Python Security Analysis (Bandit, Pylint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "All security checks have completed. Review the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review findings in GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address critical and high severity issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Update code and push changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Workflow Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Schedule:** Daily at 3:00 AM IST (Kolkata)" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** Push to main/develop, Pull Requests" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
